imports
{
import CCO.Tree             (ATerm (App), Tree (fromTree, toTree))
import CCO.Tree.Parser      (parseTree, app, arg)
import Control.Applicative  (Applicative ((<*>)), (<$>))
import CCO.SourcePos (SourcePos(..), Source(..), Pos(..))
}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

{
type Ident = String
}

data DiagBinds
  | BindNil
  | BindCons     name :: {String} d :: Diag      ds :: DiagBinds

data Diag_
  | Program      p  :: {Ident}  l  :: {Ident}
  | Platform     m  :: {Ident}
  | Interpreter  i  :: {Ident}  l  :: {Ident}  m  :: {Ident}
  | Compiler     c  :: {Ident}  l1 :: {Ident}  l2 :: {Ident}  m :: {Ident}
  | Execute      d1 :: Diag     d2 :: Diag
  | Compile      d1 :: Diag     d2 :: Diag
  
data Diag
  | Diag  pos  :: {SourcePos}  binds :: DiagBinds d :: Diag_
  | Use   pos  :: {SourcePos}  name :: {Ident}
{
empty_Diag = 
  Inh_Diag {
    bottom_left_Inh_Diag = (0,0), 
    offset_Inh_Diag = 0, 
    right_Inh_Diag = 0, 
    
    diagTypeList_Inh_Diag = [], 
    canExecuteLanguageList_Inh_Diag = [], 
    canCompileLanguageList_Inh_Diag = [], 
    implementationLanguageList_Inh_Diag = [],
    flattenedDiagList_Inh_Diag = []
  }  

empty_sp = SourcePos Stdin EOF
}
-------------------------------------------------------------------------------
-- Tree instances
-------------------------------------------------------------------------------

{
instance Tree Diag where
  fromTree (Diag pos binds d) = App "Diag" [fromTree pos, fromTree binds, fromTree d]
  fromTree (Use  pos name)    = App "Use"  [fromTree pos, fromTree name]
  
  toTree = parseTree [ app "Diag" (Diag <$> arg <*> arg <*> arg)
                     , app "Use"  (Use  <$> arg <*> arg        )
                     ]

instance Tree Diag_ where
  fromTree (Program p l)        = App "Program"  [fromTree p, fromTree l]
  fromTree (Platform m)         = App "Platform" [fromTree m]
  fromTree (Interpreter i l m)  = App "Interpreter"
                                    [fromTree i, fromTree l, fromTree m]
  fromTree (Compiler c l1 l2 m) =
    App "Compiler" [fromTree c, fromTree l1, fromTree l2, fromTree m]
  fromTree (Execute d1 d2)      = App "Execute" [fromTree d1, fromTree d2]
  fromTree (Compile d1 d2)      = App "Compile" [fromTree d1, fromTree d2]
  
  toTree = parseTree 
             [ app "Program"     (Program     <$> arg <*> arg                )
             , app "Platform"    (Platform    <$> arg                        )
             , app "Interpreter" (Interpreter <$> arg <*> arg <*> arg        )
             , app "Compiler"    (Compiler    <$> arg <*> arg <*> arg <*> arg)
             , app "Execute"     (Execute     <$> arg <*> arg                )
             , app "Compile"     (Compile     <$> arg <*> arg                )
             ]
             
instance Tree DiagBinds where
  fromTree BindNil              = App "BindNil" []
  fromTree (BindCons name d ds) = App "BindCons" [fromTree name, fromTree d, fromTree ds]
  
  toTree = parseTree
             [ app "BindNil"  (pure BindNil)
             , app "BindCons" (BindCons <$> arg <*> arg <*> arg)
             ]
}
