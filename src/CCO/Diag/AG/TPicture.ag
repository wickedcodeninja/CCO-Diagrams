imports
{
import CCO.Picture
}

{
type Point = (Double, Double)
type Range = (Double, Double)

data Connect = CompIn Point | CompOut Point | Impl Point | Execl Point

data Attach = 
  Attach {
     compIn :: Connect,                
     compOut :: Connect,
     impl :: Connect,
     execl :: Connect
  }
}

attr Diag_ Diag DiagBinds
  inh xoffset :: Double
  inh yoffset :: Double
  inh connect :: Connect
  
attr Diag_ Diag
  syn pic :: Commands
  syn outAttach :: Attach
  syn xrange :: {(Double, Double)}
  syn yrange :: {(Double, Double)}

attr Diagram
  syn pic :: {Picture}

sem Diagram 
  | Diagram 
      lhs.pic = Picture (@loc.xsize, @loc.ysize) @d.pic
                
      loc.xsize = snd @d.xrange - fst @d.xrange
      loc.ysize = snd @d.yrange - fst @d.yrange

      d.xoffset = (abs . fst) @d.xrange
      d.yoffset = (abs . fst) @d.yrange
      d.connect = CompOut (0,0)
                
      
       
sem Diag
  | Use      
      lhs.pic    = []
      lhs.xrange = (0,0)
      lhs.yrange = (0,0)
      lhs.outAttach = Attach {}
      
sem Diag_
  | Program 
      lhs.pic    = mkProgram @lhs.connect (@lhs.xoffset, @lhs.yoffset) @p @l
      lhs.outAttach = attachProgram @lhs.connect
      lhs.yrange = snd @loc.ranges
      lhs.xrange = fst @loc.ranges

      loc.ranges = rangeProgram @lhs.connect

            
  | Platform 
      lhs.pic    = []
      lhs.outAttach = attachProgram @lhs.connect
      lhs.yrange = snd @loc.ranges
      lhs.xrange = fst @loc.ranges

      loc.ranges = rangeProgram @lhs.connect
      
  | Interpreter 
      lhs.pic    = []
      lhs.outAttach = attachProgram @lhs.connect
      lhs.yrange = snd @loc.ranges
      lhs.xrange = fst @loc.ranges

      loc.ranges = rangeProgram @lhs.connect
      
  | Compiler 
      lhs.pic    = []
      lhs.outAttach = attachProgram @lhs.connect
      lhs.yrange = snd @loc.ranges
      lhs.xrange = fst @loc.ranges

      loc.ranges = rangeProgram @lhs.connect
      
  | Execute 
      lhs.pic    = []
      lhs.outAttach = attachProgram @lhs.connect
      lhs.yrange = snd @loc.ranges
      lhs.xrange = fst @loc.ranges

      loc.ranges = rangeProgram @lhs.connect
     
  | Compile 
      lhs.pic    = []
      lhs.outAttach = attachProgram @lhs.connect
      lhs.yrange = snd @loc.ranges
      lhs.xrange = fst @loc.ranges

      loc.ranges = rangeProgram @lhs.connect

{

mkProgram :: Connect -> Point -> String -> String -> Commands
mkProgram c (xo, yo) = mkProgram' (xnew, ynew)
  where (x,y)  = calcProgram c
        (xnew, ynew) = (x + xo, y + yo)

mkProgram' (x,y) p l = 
  [ Put (x+7.5,y+0) (Line (1,0) 50)
  , Put (x+7.5,y+0) (Line (0,1) 15)
  , Put (x+7.5,y+15) (Line (-1,2) 7.5)
  , Put (x+57.5,y+15) (Line (1,2) 7.5)
  , Put (x+57.5,y+0) (Line (0,1) 15)
  , Put (x+0,y+30) (Line (1,0) 65)
  , Put (x+7.5,y+15) (Makebox (50,15) p)
  , Put (x+7.5,y+0) (Makebox (50,15) l)
  ]

calcProgram :: Connect -> Point
calcProgram (CompIn (x,y))  = (x - 57.5 , y - 15)
calcProgram (CompOut (x,y))  = (x - 7.5, y - 15)
calcProgram (Impl (x,y))  = (x - 7.5, y)
calcProgram (Execl (x,y)) = undefined

attachProgram :: Connect -> Attach
attachProgram c = Attach {compIn = CompIn (x + 57.5, y + 15), compOut = CompOut (x + 7.5, y + 15), impl = Impl (x + 7.5, y)}
  where (x,y) = calcProgram c

rangeProgram :: Connect -> ((Double, Double), (Double, Double))
rangeProgram c = (xrange, yrange)
  where (x,y) = calcProgram c
        xrange = (x, x +  65)
        yrange = (y, y + 30)


mkPlatform' :: Point -> String -> Commands
mkPlatform' (x,y) m = 
  [ Put (x+0,y-30+15) (Line (5,-3) 25)
  , Put (x+25,y-30+0) (Line (5,3) 25)
  , Put (x+0,y-30+15) (Line (0,1) 15)
  , Put (x+0,y-30+30) (Line (1,0) 50)
  , Put (x+50,y-30+30) (Line (0,-1) 15)
  , Put (x+0,y-30+15) (Makebox (50,15) m)
  ]

mkInterpreter :: (Double, Double) -> String -> String -> String -> Commands
mkInterpreter (x,y) i l m = 
  [ Put (x+0,y-30+0) (Framebox (50,30) "")
  , Put (x+0,y-30+20) (Makebox (50,10) l)
  , Put (x+0,y-30+10) (Makebox (50,10) i)
  , Put (x+0,y-30+0) (Makebox (50,10) m)
  ]

mkCompiler :: (Double, Double) -> String -> String -> String -> String -> Commands
mkCompiler (x,y) c l1 l2 m = 
  [ Put (x+50,y-20+0) (Line (0,1) 20)
  , Put (x+50,y-20+20) (Line (-1,0) 50)
  , Put (x+0,y-20+20) (Line (0,1) 10)
  , Put (x+0,y-20+30) (Line (1,0) 150)
  , Put (x+150,y-20+30) (Line (0,-1) 10)
  , Put (x+150,y-20+20) (Line (-1,0) 50)
  , Put (x+100,y-20+20) (Line (0,-1) 20)
  , Put (x+100,y-20+0) (Line (-1,0) 50)
  , Put (x+0,y-20+20) (Makebox (50,10) l1)
  , Put (x+50,y-20+20) (Makebox (50,10) "$\\longrightarrow$")
  , Put (x+100,y-20+20) (Makebox (50,10) l2)
  , Put (x+50,y-20+10) (Makebox (50,10) c)
  , Put (x+50,y-20+0) (Makebox (50,10) m)
 ]
}

{
renderDiagram :: Diagram -> Picture
renderDiagram diagram = pic_Syn_Diagram (wrap_Diagram (sem_Diagram diagram) Inh_Diagram)
}

{
empty_Diag_ =
  Inh_Diag_ {
    pos_Inh_Diag_ = SourcePos Stdin EOF,
    
    diagTypeList_Inh_Diag_ = [], 
    canExecuteLanguageList_Inh_Diag_ = [], 
    canTransformLanguageList_Inh_Diag_ = [], 
    implementationLanguageList_Inh_Diag_ = [],
    flattenedDiagList_Inh_Diag_ = [],
    diagNameList_Inh_Diag_ = [],
    
    typeAnnotation_Inh_Diag_ = Nothing
  }
}
