-- (C) 2017 Wout Elsinghorst, Xander van der Goot

optpragmas
{
{-# LANGUAGE PatternGuards #-}
}

imports
{
import CCO.Printing

import Data.Maybe
}

{
data Diagnostic 
  = TyError    SourcePos (Environment DiagType) DiagType (Maybe DiagType) String
  | ScopeError SourcePos (Environment DiagType)                           String
}


-- Optional Type Annotations
  
attr Diag_
  inh   typeAnnotation :: { Maybe DiagType }

sem Diag
  | Diag d.typeAnnotation = @typeAnnotation
  
  
  
-- Type Synthesization

attr Diagram Diag Diag_
  syn   diagType :: { DiagType }
  
attr Diag Diag_ DiagBinds
  inh   diagTypeList                :: { Environment DiagType                        }
attr DiagBinds
  syn   diagTypeList               use {++} { [] } :: { Environment DiagType                        }
  
sem Diag_
  | Program     loc.diagType = mkProgramType  @implementationLanguage                    
  | Compiler    loc.diagType = mkCompilerType @implementationLanguage @canCompileLanguage 
  
  | Platform    loc.diagType = mkPlatformType @canExecuteLanguage  
  | Interpreter loc.diagType = mkInterpreterType @implementationLanguage @canExecuteLanguage  
      
  | Execute     loc.diagType = setImplementationLanguage @implementationLanguage @d1.diagType
  | Compile     loc.diagType = setImplementationLanguage @implementationLanguage @d1.diagType

sem Diag
  | Diag        loc.diagType = @d.diagType
  | Use         loc.diagType = case (lookup @name @lhs.diagTypeList) of
                                 Just typ -> typ
                                 Nothing  -> Type_Top

sem Diagram
  | Diagram     loc.diagType = @d.diagType

sem DiagBinds
  | BindCons    lhs.diagTypeList = (@name, @d.diagType) : @ds.diagTypeList
  
sem Diag
  | Diag        loc.diagTypeList = @binds.diagTypeList ++ @lhs.diagTypeList
  
sem Diagram
  | Diagram     d.diagTypeList = []
  
  
  
-- Type Checking. Check if the inferred types match the annotations and check if subdiagrams have the expected type.
  
attr Diag Diag_ DiagBinds Diagram
  syn   typeDiagnostics use {++} { [] } :: { [Diagnostic] }
  
sem Diag_
  | Program     lhs.typeDiagnostics = checkTyWithAnnotation @lhs.pos @loc.diagName @loc.diagType @lhs.typeAnnotation
  | Compiler    lhs.typeDiagnostics = checkTyWithAnnotation @lhs.pos @loc.diagName @loc.diagType @lhs.typeAnnotation
  
  | Platform    lhs.typeDiagnostics = checkTyWithAnnotation @lhs.pos @loc.diagName @loc.diagType @lhs.typeAnnotation
  | Interpreter lhs.typeDiagnostics = checkTyWithAnnotation @lhs.pos @loc.diagName @loc.diagType @lhs.typeAnnotation
      
  | Execute     lhs.typeDiagnostics = @d1.typeDiagnostics ++ @d2.typeDiagnostics ++ (checkTyExecute @lhs.pos @lhs.diagTypeList @d1.diagType @d2.diagType) ++ checkTyWithAnnotation @lhs.pos @loc.diagName @loc.diagType @lhs.typeAnnotation
  | Compile     lhs.typeDiagnostics = @d1.typeDiagnostics ++ @d2.typeDiagnostics ++ (checkTyCompile @lhs.pos @lhs.diagTypeList @d1.diagType @d2.diagType) ++ checkTyWithAnnotation @lhs.pos @loc.diagName @loc.diagType @lhs.typeAnnotation

sem Diag
  | Use         lhs.typeDiagnostics = checkTyUse @pos @lhs.diagTypeList @name (lookup @name @lhs.diagTypeList) ++ checkTyWithAnnotation @pos @name @loc.diagType @typeAnnotation
  | Diag        lhs.typeDiagnostics = @binds.typeDiagnostics ++ @d.typeDiagnostics


-- Inlining all Let bindings at their usage sites

attr Diagram Diag
  syn   flattenedDiag                     :: { Diag }
attr Diag Diag_
  syn   flattenedDiag_                    :: { Diag_ }

attr Diag Diag_ DiagBinds
  inh   flattenedDiagList                 :: { Environment Diag_ }
attr DiagBinds
  syn   flattenedDiagList use {++} { [] } :: { Environment Diag_ }

sem Diag
  | Diag        lhs.flattenedDiag  = Diag @pos BindNil (Just @loc.diagType) $ @d.flattenedDiag_
  | Use         lhs.flattenedDiag  = Diag @pos BindNil (Just @loc.diagType) $ @loc.flattenedDiag_
                loc.flattenedDiag_ = fromJust (lookup @name @lhs.flattenedDiagList)
                
sem Diag_
  | Program     lhs.flattenedDiag_ = Program @p @l
  | Platform    lhs.flattenedDiag_ = Platform @m
  | Compiler    lhs.flattenedDiag_ = Compiler @c @l1 @l2 @m
  | Interpreter lhs.flattenedDiag_ = Interpreter @i @l @m
  | Execute     lhs.flattenedDiag_ = Execute @d1.flattenedDiag @d2.flattenedDiag
  | Compile     lhs.flattenedDiag_ = Compile @d1.flattenedDiag @d2.flattenedDiag

sem DiagBinds
  | BindCons    lhs.flattenedDiagList = (@name, @d.flattenedDiag_) : @ds.flattenedDiagList

sem Diag
  | Diag        loc.flattenedDiagList = @binds.flattenedDiagList ++ @lhs.flattenedDiagList

sem Diagram
  | Diagram     d.flattenedDiagList = []
  
  
  
-- Type Checking Specific Diagram constructions.
{
checkTyExecute :: SourcePos -> Environment DiagType -> DiagType -> DiagType -> [Diagnostic]
checkTyExecute pos env d1 d2 =
  case (coerceExecutable d1, coerceExecutor d2) of
    ( Just (Type_Executable l1), Just (Type_Executor l2) ) | l1 == l2 -> []
    ( Just (Type_Executable l1), Just (Type_Executor l2) ) | l1 /= l2 -> [TyError pos env d1 (Just (Type_Executable  l2)) $ "/Execute/: The first diagram is inferred to have been written in the language '" ++ l1 ++ "' which is different from the execution language '" ++ l2 ++ "' of the the second diagram."]
    ( Just (Type_Executable l1), Nothing                 )            -> [TyError pos env d2 (Just (Type_Executor    l1)) $ "/Execute/: The type inferred for the second diagram is not a valid executor."]                                               
    ( Nothing                  , Just (Type_Executor l2) )            -> [TyError pos env d1 (Just (Type_Executable  l2)) $ "/Execute/: The type inferred for the first diagram is not executable."]
    ( Nothing                  , Nothing                 )            -> [TyError pos env d1 (Nothing                   ) $ "/Execute/: The type inferred for the first diagram is not a subtype of `Executable`."]

checkTyCompile :: SourcePos -> Environment DiagType -> DiagType -> DiagType -> [Diagnostic]
checkTyCompile pos env d1 d2 =
  case (coerceExecutable d1, coerceTransformer d2) of
    ( Just (Type_Executable l1), Just (Type_Transformer (l2, _)) ) | l1 == l2 -> []
    ( Just (Type_Executable l1), Just (Type_Transformer (l2, _)) ) | l1 /= l2 -> [TyError pos env d1 (Just (Type_Executable  l2)) $ "/Compile/: The first diagram is inferred to have been written in the language '" ++ l1 ++ "' which is different from the input language '" ++ l2 ++ "' of the compiler represented by the second diagram."]
    ( Just (Type_Executable l1), Nothing                         )            -> [TyError pos env d2 (Nothing                   ) $ "/Compile/: The type inferred for the second diagram is not a valid compiler for the language '" ++ l1 ++ "'."]                                               
    ( Nothing                  , Just (Type_Transformer (l2, _)) )            -> [TyError pos env d1 (Just (Type_Executable  l2)) $ "/Compile/: The type inferred for the first diagram is not executable."]
    ( Nothing                  , Nothing                         )            -> [TyError pos env d1 (Nothing                   ) $ "/Compile/: The type inferred for the first diagram is not a subtype of `Executable`."]

checkTyWithAnnotation :: SourcePos -> Ident -> DiagType -> Maybe DiagType -> [Diagnostic]
checkTyWithAnnotation pos diagName inferredType Nothing = []
checkTyWithAnnotation pos diagName inferredType (Just typeAnnotation) 
  | inferredType == typeAnnotation = []
  | otherwise                      = [TyError pos [] inferredType (Just typeAnnotation) $ "The provided type signature for the diagram '" ++ diagName ++ "' doesn't match the inferred type."] 

checkTyUse :: SourcePos -> Environment DiagType -> String -> Maybe DiagType -> [Diagnostic]
checkTyUse pos env name (Just typ) = []
checkTyUse pos env name Nothing    = [ScopeError pos env $ "/Use/: variable '" ++ name ++ "' is not in scope."] 
}

-- Checking the subtype relation
{
coerceExecutor :: DiagType -> Maybe DiagType
coerceExecutor (Type_Interpreter l _) = Just $ Type_Executor l
coerceExecutor (Type_Platform m  )    = Just $ Type_Executor m
coerceExecutor _                      = Nothing

coerceTransformer :: DiagType -> Maybe DiagType
coerceTransformer (Type_Compiler t _) = Just $ Type_Transformer t
coerceTransformer _                   = Nothing

coerceExecutable :: DiagType -> Maybe DiagType
coerceExecutable (Type_Program       (Right m)) = Just $ Type_Executable m
coerceExecutable (Type_Compiler    _ (Right m)) = Just $ Type_Executable m
coerceExecutable (Type_Interpreter _ (Right m)) = Just $ Type_Executable m
coerceExecutable _                              = Nothing
}

-- Type Construction / Destruction / Modification
{
setImplementationLanguage :: Implementation -> DiagType -> DiagType
setImplementationLanguage m (Type_Program       _ ) = Type_Program       $ m
setImplementationLanguage m (Type_Compiler t    _ ) = Type_Compiler t    $ m
setImplementationLanguage m (Type_Interpreter l _ ) = Type_Interpreter l $ m
setImplementationLanguage _   _                     = Type_Top
  
getImplementationLanguage :: DiagType -> Maybe Language
getImplementationLanguage (Type_Program       (Right m)) = Just m
getImplementationLanguage (Type_Compiler _    (Right m)) = Just m
getImplementationLanguage (Type_Interpreter _ (Right m)) = Just m
getImplementationLanguage _                              = Nothing

mkCompilerType :: Implementation -> Maybe SourceAndTargetLanguage -> DiagType
mkCompilerType m (Just l12) = Type_Compiler l12 m
mkCompilerType _ Nothing    = Type_Top

mkInterpreterType :: Implementation -> Maybe Language -> DiagType
mkInterpreterType l2 (Just l1) = Type_Interpreter l1 l2
mkInterpreterType _  Nothing   = Type_Top

mkPlatformType :: Maybe Language -> DiagType
mkPlatformType (Just m) = Type_Platform m
mkPlatformType Nothing  = Type_Top

mkProgramType :: Implementation -> DiagType
mkProgramType = Type_Program
}

-- External Interface
{
checkDiagram :: Diagram -> (Maybe (Diag, DiagType), [Diagnostic])
checkDiagram diagram =
  let semantics = sem_Diagram diagram
      results = wrap_Diagram semantics Inh_Diagram
      diagnostics = typeDiagnostics_Syn_Diagram results
      flattenedDiag = flattenedDiag_Syn_Diagram results
      diagType = diagType_Syn_Diagram results
  in (Just (flattenedDiag, diagType), diagnostics)
}
