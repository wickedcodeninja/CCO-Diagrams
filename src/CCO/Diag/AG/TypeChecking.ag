-- (C) 2017 Wout Elsinghorst

imports
{
import CCO.Printing

import Data.Maybe

}

{

type Language = String
type SourceAndTargetLanguage = (Language, Language)

}


attr Diag Diag_
  syn   isTypeCorrect :: Bool
  syn   isWrittenInLanguage :: (Maybe Language)
  syn   canExecuteLanguage  :: (Maybe Language)
  syn   canCompileLanguage  :: (Maybe SourceAndTargetLanguage)
 
sem Diag_
  | Program     lhs.isTypeCorrect = True
  | Compiler    lhs.isTypeCorrect = True
  
  | Platform    lhs.isTypeCorrect = True
  | Interpreter lhs.isTypeCorrect = True
      
  | Execute     lhs.isTypeCorrect = (    @d1.isTypeCorrect && isJust @d1.isWrittenInLanguage
                                      && @d2.isTypeCorrect && isJust @d2.canExecuteLanguage          
                                      && @d1.isWrittenInLanguage == @d2.canExecuteLanguage
                                    )
  | Compile     lhs.isTypeCorrect = (    @d1.isTypeCorrect && isJust @d1.isWrittenInLanguage
                                      && @d2.isTypeCorrect && isJust @d2.canCompileLanguage          
                                      && @d1.isWrittenInLanguage == (fmap fst @d2.canCompileLanguage)
                                    )

sem Diag_
  | Program     lhs.canExecuteLanguage = Nothing
  | Compiler    lhs.canExecuteLanguage = Nothing
  
  | Platform    lhs.canExecuteLanguage = Just @m
  | Interpreter lhs.canExecuteLanguage = Just @l
      
  | Execute     lhs.canExecuteLanguage = @d1.canExecuteLanguage
  | Compile     lhs.canExecuteLanguage = @d1.canExecuteLanguage

sem Diag_
  | Program     lhs.canCompileLanguage = Nothing
  | Compiler    lhs.canCompileLanguage = Just (@l1, @l2)
  
  | Platform    lhs.canCompileLanguage = Nothing
  | Interpreter lhs.canCompileLanguage = Nothing
      
  | Execute     lhs.canCompileLanguage = @d1.canCompileLanguage
  | Compile     lhs.canCompileLanguage = @d1.canCompileLanguage
  
sem Diag_
  | Program     lhs.isWrittenInLanguage = Just @l
  | Compiler    lhs.isWrittenInLanguage = Just @m
  
  | Platform    lhs.isWrittenInLanguage = Nothing
  | Interpreter lhs.isWrittenInLanguage = Just @m
      
  | Execute     lhs.isWrittenInLanguage = @d2.isWrittenInLanguage
  | Compile     lhs.isWrittenInLanguage = fmap snd @d2.canCompileLanguage
                                            
sem Diag
  | Diag      lhs.diagramType         = @d.diagramType
  | Diag      lhs.isWrittenInLanguage = @d.isWrittenInLanguage
  | Diag      lhs.canExecuteLanguage  = @d.canExecuteLanguage
  | Diag      lhs.isTypeCorrect       = @d.isTypeCorrect
  
{

isTypeCorrect :: Diag -> Either String Diag
isTypeCorrect diag = 
  if isTypeCorrect_Syn_Diag (wrap_Diag (sem_Diag diag) Inh_Diag)
     then Right $ diag
     else Left  $ "An error occured but we don't know where. We'll get back to you on that."

}