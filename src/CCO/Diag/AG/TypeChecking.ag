-- (C) 2017 Wout Elsinghorst

optpragmas
{
{-# LANGUAGE PatternGuards #-}
}

imports
{
import CCO.Printing

import Data.Maybe
}

{
type Language = String
type Platform = String

type SourceAndTargetLanguage = (Language, Language)

type DiagTypeEnvironment = [(String, DiagType)]

data Diagnostic 
  = TyError    SourcePos DiagTypeEnvironment DiagType String
  | ScopeError SourcePos DiagTypeEnvironment          String

type Implementation = Either Platform Language
  
data DiagType 
  = Type_Top 
  | Type_Program                          Implementation
  | Type_Compiler SourceAndTargetLanguage Implementation -- canCompileLanguage
  | Type_Executor Language                Implementation -- canExecuteLanguage

instance Show DiagType where
  show (Type_Top)                          = "Top"
  show (Type_Program           (Right m))  = "Program {"  ++ m ++  "}"
  show (Type_Program           (Left  m))  = "Program {!" ++ m ++ "!}"
  show (Type_Compiler (l1, l2) (Right m))  = "Compiler [" ++ l1 ++ " ~> " ++ l2 ++ "] {"  ++ m ++  "}"
  show (Type_Compiler (l1, l2) (Left  m))  = "Compiler [" ++ l1 ++ " ~> " ++ l2 ++ "] {!" ++ m ++ "!}" 
  show (Type_Executor l1       (Right l2)) = "Executor [" ++ l1 ++ " ~> " ++ l2 ++ "]"
  show (Type_Executor l1       (Left  _))  = "Executor {!" ++ l1 ++ "!}" 
}

-- Position Information
  
attr Diag_ 
  inh   pos :: { SourcePos }
sem Diag
  | Diag        d.pos = @pos

-- Semantics
  
attr Diag Diag_
  syn   implementationLanguage :: { Either Platform Language }
  syn   canExecuteLanguage     :: { Maybe Language }
  syn   canCompileLanguage     :: { Maybe SourceAndTargetLanguage }
  
sem Diag_
  | Program     loc.canExecuteLanguage = Nothing
  | Compiler    loc.canExecuteLanguage = Nothing
  
  | Platform    loc.canExecuteLanguage = Just @m
  | Interpreter loc.canExecuteLanguage = Just @l
      
  | Execute     loc.canExecuteLanguage = @d1.canExecuteLanguage
  | Compile     loc.canExecuteLanguage = @d1.canExecuteLanguage

sem Diag
  | Use         lhs.canExecuteLanguage = fromJust (lookup @name @lhs.canExecuteLanguageList)
  
sem Diag_
  | Program     loc.canCompileLanguage = Nothing
  | Compiler    loc.canCompileLanguage = Just (@l1, @l2)
  
  | Platform    loc.canCompileLanguage = Nothing
  | Interpreter loc.canCompileLanguage = Nothing
      
  | Execute     loc.canCompileLanguage = @d1.canCompileLanguage
  | Compile     loc.canCompileLanguage = @d1.canCompileLanguage
  
sem Diag
  | Use         lhs.canCompileLanguage = fromJust (lookup @name @lhs.canCompileLanguageList)
  
sem Diag_
  | Program     loc.implementationLanguage = Right @l
  | Compiler    loc.implementationLanguage = Right @m
  
  | Platform    loc.implementationLanguage = Left  @m
  | Interpreter loc.implementationLanguage = Right @m
      
  | Execute     loc.implementationLanguage = @d2.implementationLanguage
  | Compile     loc.implementationLanguage = case @d2.canCompileLanguage of
                                               Just (l1, l2) -> Right l2
                                               Nothing       -> Left "invalid"
sem Diag
  | Use         lhs.implementationLanguage = fromJust (lookup @name @lhs.implementationLanguageList)



-- Type Checking

attr Diag Diag_ DiagBinds Diagram
  syn   typeDiagnostics use {++} { [] } :: { [Diagnostic] }

attr Diag Diag_
  syn   diagType                        :: { DiagType }

sem Diag_
  | Program     lhs.diagType = mkProgramType  @implementationLanguage                    
  | Compiler    lhs.diagType = mkCompilerType @implementationLanguage @canCompileLanguage 
  
  | Platform    lhs.diagType = mkExecutorType @implementationLanguage @canExecuteLanguage  
  | Interpreter lhs.diagType = mkExecutorType @implementationLanguage @canExecuteLanguage  
      
  | Execute     lhs.diagType = replaceImplementationLanguage @implementationLanguage @d1.diagType
  | Compile     lhs.diagType = replaceImplementationLanguage @implementationLanguage @d1.diagType

sem Diag
  | Use         lhs.diagType = case (lookup @name @lhs.diagTypeList) of
                                Just typ -> typ
                                Nothing  -> Type_Top

sem Diag_
  | Program     lhs.typeDiagnostics = []
  | Compiler    lhs.typeDiagnostics = []
  
  | Platform    lhs.typeDiagnostics = []
  | Interpreter lhs.typeDiagnostics = []
      
  | Execute     lhs.typeDiagnostics = @d1.typeDiagnostics ++ @d2.typeDiagnostics ++ (checkTyExecute @lhs.pos @lhs.diagTypeList @d1.diagType @d2.diagType)
  | Compile     lhs.typeDiagnostics = @d1.typeDiagnostics ++ @d2.typeDiagnostics ++ (checkTyCompile @lhs.pos @lhs.diagTypeList @d1.diagType @d2.diagType)

sem Diag
  | Use         lhs.typeDiagnostics = checkTyUse @pos @lhs.diagTypeList @name (lookup @name @lhs.diagTypeList)
  | Diag        lhs.typeDiagnostics = @binds.typeDiagnostics ++ @d.typeDiagnostics



-- Let bindings
  
attr Diag Diag_ DiagBinds
  inh   diagTypeList                :: { [(String, (DiagType)                     )] }
  inh   implementationLanguageList  :: { [(String, (Either Platform Language)     )] }
  inh   canExecuteLanguageList      :: { [(String, (Maybe Language)               )] }
  inh   canCompileLanguageList      :: { [(String, (Maybe SourceAndTargetLanguage))] }
attr DiagBinds
  syn   diagTypeList               use {++} { [] } :: { [(String, (DiagType)                     )] }
  syn   implementationLanguageList use {++} { [] } :: { [(String, (Either Platform Language)     )] }
  syn   canExecuteLanguageList     use {++} { [] } :: { [(String, (Maybe Language)               )] }
  syn   canCompileLanguageList     use {++} { [] } :: { [(String, (Maybe SourceAndTargetLanguage))] }

sem DiagBinds
  | BindCons    lhs.diagTypeList               = (@name, @d.diagType)               : @ds.diagTypeList
                lhs.implementationLanguageList = (@name, @d.implementationLanguage) : @ds.implementationLanguageList
                lhs.canExecuteLanguageList     = (@name, @d.canExecuteLanguage)     : @ds.canExecuteLanguageList
                lhs.canCompileLanguageList     = (@name, @d.canCompileLanguage)     : @ds.canCompileLanguageList
sem Diag
  | Diag        loc.diagTypeList               = @binds.diagTypeList               ++ @lhs.diagTypeList
                loc.implementationLanguageList = @binds.implementationLanguageList ++ @lhs.implementationLanguageList
                loc.canExecuteLanguageList     = @binds.canExecuteLanguageList     ++ @lhs.canExecuteLanguageList
                loc.canCompileLanguageList     = @binds.canCompileLanguageList     ++ @lhs.canCompileLanguageList



-- Flattening

attr Diagram Diag
  syn   flattenedDiag                     :: { Diag }
attr Diag Diag_
  syn   flattenedDiag_                    :: { Diag_ }

attr Diag Diag_ DiagBinds
  inh   flattenedDiagList                 :: { [(String, Diag_)] }
attr DiagBinds
  syn   flattenedDiagList use {++} { [] } :: { [(String, Diag_)] }

sem Diag
  | Diag        lhs.flattenedDiag = Diag @pos BindNil $ @d.flattenedDiag_
  | Use         lhs.flattenedDiag = Diag @pos BindNil $ @loc.flattenedDiag_
                loc.flattenedDiag_ = fromJust (lookup @name @lhs.flattenedDiagList)
sem Diag_
  | Program     lhs.flattenedDiag_ = Program @p @l
  | Platform    lhs.flattenedDiag_ = Platform @m
  | Compiler    lhs.flattenedDiag_ = Compiler @c @l1 @l2 @m
  | Interpreter lhs.flattenedDiag_ = Interpreter @i @l @m
  | Execute     lhs.flattenedDiag_ = Execute @d1.flattenedDiag @d2.flattenedDiag
  | Compile     lhs.flattenedDiag_ = Compile @d1.flattenedDiag @d2.flattenedDiag

sem DiagBinds
  | BindCons    lhs.flattenedDiagList = (@name, @d.flattenedDiag_) : @ds.flattenedDiagList

sem Diag
  | Diag        loc.flattenedDiagList = @binds.flattenedDiagList ++ @lhs.flattenedDiagList


-- Type Checking Specific Diagrams
{
checkTyExecute :: SourcePos -> DiagTypeEnvironment -> DiagType -> DiagType -> [Diagnostic]
checkTyExecute pos env d1 d2@(Type_Executor l2 _) | Just l1 <- getImplementationLanguage d1, l1 == l2  = [] -- Languages match!!
checkTyExecute pos env d1 d2@(Type_Executor l2 _) | Just l1 <- getImplementationLanguage d1, l1 /= l2  = [TyError pos env d1 $ "/Execute/: The implementation language '" ++ l1 ++ "' of the first diagram doesn't match the execution language '" ++ l2 ++ "' of the second diagram." ]
checkTyExecute pos env d1 d2                      | Just l1 <- getImplementationLanguage d1            = [TyError pos env d2 $ "/Execute/: The second diagram is not a valid execution unit for the language '" ++ l1 ++ "'."]
checkTyExecute pos env d1 d2                      | Nothing <- getImplementationLanguage d1            = [TyError pos env d1 $ "/Execute/: The first diagram is not executable."]

checkTyCompile :: SourcePos -> DiagTypeEnvironment -> DiagType -> DiagType -> [Diagnostic]
checkTyCompile pos env d1 (Type_Compiler (l2, _) _) | Just l1 <- getImplementationLanguage d1, l1 == l2  = [] -- Languages match!!
checkTyCompile pos env d1 (Type_Compiler (l2, _) _) | Just l1 <- getImplementationLanguage d1, l1 /= l2  = [TyError pos env d1 $ "/Compile/: The implementation language '" ++ l1 ++ "' of the first diagram doesn't match the compiler frontend language '" ++ l2 ++ "' of the second diagram." ]
checkTyCompile pos env d1 d2                        | Just l1 <- getImplementationLanguage d1            = [TyError pos env d2 $ "/Compile/: The second diagram is not a valid compiler for the language '" ++ l1 ++ "'."]
checkTyCompile pos env d1 d2                        | Nothing <- getImplementationLanguage d1            = [TyError pos env d1 $ "/Compile/: The first diagram is not compilable."]

checkTyUse :: SourcePos -> DiagTypeEnvironment -> String -> Maybe DiagType -> [Diagnostic]
checkTyUse pos env name (Just typ) = []
checkTyUse pos env name Nothing    = [ScopeError pos env $ "/Use/: variable '" ++ name ++ "' is not in scope."] 
}



{
replaceImplementationLanguage :: Implementation -> DiagType -> DiagType
replaceImplementationLanguage l1 (Type_Program     (Right _) ) = Type_Program     $ l1
replaceImplementationLanguage l1 (Type_Compiler l2 (Right _) ) = Type_Compiler l2 $ l1
replaceImplementationLanguage l1 (Type_Executor l2 (Right _) ) = Type_Executor l2 $ l1
replaceImplementationLanguage _   _                            = Type_Top
  
getImplementationLanguage :: DiagType -> Maybe Language
getImplementationLanguage (Type_Compiler _ (Right x)) = Just x
getImplementationLanguage (Type_Executor _ (Right x)) = Just x
getImplementationLanguage (Type_Program    (Right x)) = Just x
getImplementationLanguage _                           = Nothing

mkCompilerType :: Implementation -> Maybe SourceAndTargetLanguage -> DiagType
mkCompilerType m (Just l12) = Type_Compiler l12 m
mkCompilerType _ Nothing    = Type_Top

mkExecutorType :: Implementation -> Maybe Language -> DiagType
mkExecutorType l2 (Just l1) = Type_Executor l1 l2
mkExecutorType _  Nothing   = Type_Top

mkProgramType :: Implementation -> DiagType
mkProgramType m = Type_Program m
}



{
checkDiagram :: Diagram -> (Maybe Diag, [Diagnostic])
checkDiagram diagram =
  let semantics = sem_Diagram diagram
      results = wrap_Diagram semantics Inh_Diagram
      diagnostics = typeDiagnostics_Syn_Diagram results
      flattenedDiag = flattenedDiag_Syn_Diagram results
  in (Just flattenedDiag, diagnostics)
}
